/* Regra para registro das informações na tabela de históricos de integração financeira 
Desenvolvido em 10/11/2019 por Edson Reis */

@ Definições Gerais @

@ Variáveis Numéricas @
Definir Numero vNumEmp;
Definir Numero vCodFil;
Definir Numero vCodFor;
Definir Numero vTipCol;
Definir Numero vNumCad;
Definir Numero vCodCal;
Definir Numero vCodDep;
Definir Numero vTipCif;
Definir Numero vValTit;
Definir Numero vFilSap;
Definir Numero vCoDusu;
Definir Numero vCodCif;                     
Definir Numero vValTit;
Definir Numero vCodOem;
Definir Numero vOriGps;
Definir Numero vCtaFin;
Definir Numero vCodRed;
Definir Numero vCodNtg;
Definir Numero vProxNum;
Definir Numero vUltNum;
Definir Numero vSeDeuCerto;
Definir Numero vDia;
Definir Numero vMes;
Definir Numero vAno;
Definir Numero vCodBan;
Definir Numero vCodAge;
Definir Alfa xPortador;
   
@ Variáveis Alfanuméricas @                        
Definir Alfa xTipTis;
Definir Alfa xCodTrs;
Definir Alfa xSerNfi;
Definir Alfa xObsTit;
Definir Alfa xTipAgr;
Definir Alfa xCodCcu;
Definir Alfa xModPag;
Definir Alfa xNumTit;  
Definir Alfa xTipTit;
Definir Alfa xGruCon;
Definir Alfa xConta;
Definir Alfa xFluxo;
Definir Alfa xUltStr;
Definir Alfa xUltNum; 
Definir Alfa xProxNum;
Definir Alfa xCursorFluxo;
Definir Alfa xCursorNumTit;
Definir Alfa xDia;
Definir Alfa xMes;
Definir Alfa xAno;
Definir Alfa xNumCad;
Definir Alfa xValTit;
Definir Alfa aCodCif;

@ Variáveis Datas @
Definir Data vVncTit;
Definir Data vIniPer;
Definir Data vIniFer;
Definir Data vDatDem;
Definir Data vDatEnt;
Definir Data vDatEmi;
Definir Data vDatAux;
Definir Data vDatEnt;
Definir Data vVncTit;

@ Zerando variáveis @
vNumEmp = 0;
vCodFil = 0;
vCodFor = 0;
vTipCol = 0;
vNumCad = 0;
vCodCal = 0;
vTipCif = 0;
vValTit = 0;
vFilSap = 0;
vCoDusu = 0;
vCodCif = 0;
vValTit = 0;
vCodOem = 0;
vOriGps = 0;
vCtaFin = 0;
vCodRed = 0;
vCodNtg = 0;
vCodDep = 0;
vUltNum = 0;
vProxNum = 0;
vSeDeuCerto = 0;
xTipTis = "";
xCodTrs = "";
xSerNfi = "";
xObsTit = "";
xTipAgr = "";
xCodCcu = "";
xModPag = "";
xTipTit = "";
xGruCon = "";
xUltNum = "";
xUltStr = "";
xProxNum = "";
xNumTit = "";
xConta = "";
xFluxo = "";
xNumCad = "";
xValTit = "";
xPortador = "";
vVncTit = 0;
vIniPer = 0;
vIniFer = 0;
vDatDem = 0;
vDatEnt = 0;
vDatEmi = 0;
vDatAux = 0;
vDatEnt = 0;
vVncTit = 0;
vCodBan = 0;
vCodAge = 0;

@ Atribuição de Valores @

@ Variáveis Numéricas @
vNumEmp = R047PEN.NumEmp;
vCodFil = R047PEN.CodFil;
vCodFor = R047PEN.CodFor;
vTipCol = R047PEN.TipCol;
vNumCad = R047PEN.NumCad;
vCodCal = R047PEN.CodCal;
vTipCif = 1;
vValTit = R047PEN.ValTit;
vFilSap = R047PEN.FilSap;
vCoDusu = R047PEN.CoDusu;
vCodCif = R047PEN.CodCif;
vValTit = R047PEN.ValTit;
vCodOem = R047PEN.CodOem;
vOriGps = R047PEN.OriGps;
vCtaFin = R047PEN.CtaFin;
vCodRed = R047PEN.CodRed;
vCodNtg = R047PEN.CodNtg; 
vCodBan = R047PEN.CodBan;
vCodAge = R047PEN.CodAge;

/* Gerar o portador conf. matriz de acordo com banco e estabelecimento 
Melhoria desenvolvida em 12/12/2019 por Edson Reis */

Se ((vCodCif = 8)  ou (vCodCif = 9)   ou (vCodCif = 11) ou (vCodCif = 7)  ou (vCodCif = 12) 
ou (vCodCif = 1)   ou (vCodCif = 10)  ou (vCodCif = 14) ou (vCodCif = 20) ou (vCodCif = 100)
ou (vCodCif = 101) ou (vCodCif = 102) ou (vCodCif = 31) ou (vCodCif = 28) ou (vCodCif = 30)
ou (vCodCif = 26)  ou (vCodCif = 27)  ou (vCodCif = 29) ) {

@ Banco do Brasil estabelecimento ADM portador 1003@ 
Se ((vCodBan = 1) e (vCodFil <> 6)) {
xPortador = "1003"; }
Senao {

@ Banco do Brasil estabelecimento HUN portador 1005 @
Se ((vCodBan = 1) e (vCodFil = 6)) {
xPortador = "1005"; }
Senao {

@ Santander estabelecimento ADM portador 0335 @
Se ((vCodBan = 33) e (vCodFil <> 6)) {
xPortador = "0335"; }
Senao {

@ Santander estabelecimento HUN portador 0330 @
Se ((vCodBan = 33) e (vCodFil = 6)) {
xPortador = "0330"; }
Senao {

@ Banco Real estabelecimento ADM portador 0335 @
Se ((vCodBan = 356) e (vCodFil <> 6)) {
xPortador = "0335"; }
Senao {

@ Banco Real estabelecimento HUN portador 0330 @
Se ((vCodBan = 356) e (vCodFil = 6)) {
xPortador = "0330"; }
Senao {

@ Sicredi estabelecimento ADM portador 1062 @
Se ((vCodBan = 999) e (vCodFil <> 6)) {
xPortador = "1062"; }
Senao {

@ Sicredi estabelecimento HUN portador 748 @
Se ((vCodBan = 999) e (vCodFil = 6)) {
xPortador = "0748"; }
Senao {

@ Itau estabelecimento ADM portador 3415 @
Se ((vCodBan = 341) e (vCodFil <> 6)) {
xPortador = "3415"; }
Senao {

@ Itau estabelecimento HUN portador 3410 @
Se ((vCodBan = 341) e (vCodFil = 6)) {
xPortador = "3410"; }
Senao {

@ Caixa Econômica Federal único portador 104 @
Se (vCodBan = 104) {
xPortador = "0104"; }
Senao {

@ Bradesco único portador 237 @
Se (vCodBan = 237) {
xPortador = "0237"; }
Senao {


}}}}}}}}}}}}}

@ Melhoria criada em 07/07/2020 por Edson Reis e  Naedson Campos @
@ Se o CIF for de encargos pela matriz de pagamento, o portador deve ser único @

@ CIFs para FGTS estabelecimento ADM portador 3415 @
Se (((vCodCif = 6) ou (vCodCif = 36) ou (vCodCif = 37) ou (vCodCif = 16)) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIFs para FGTS estabelecimento HUN portador 3410 @
Se (((vCodCif = 6) ou (vCodCif = 36) ou (vCodCif = 37) ou (vCodCif = 16)) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIFs para INSS estabelecimento ADM portador 3415 @
Se (((vCodCif = 45) ou (vCodCif = 46) ou (vCodCif = 47) ou (vCodCif = 48)) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIFs para INSS estabelecimento HUN portador 3410 @
Se (((vCodCif = 45) ou (vCodCif = 46) ou (vCodCif = 47) ou (vCodCif = 48)) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIFs para IRRF estabelecimento ADM portador 3415 @
Se (((vCodCif = 5) ou (vCodCif = 23) ou (vCodCif = 15) ou (vCodCif = 13) ou (vCodCif = 19)) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIFs para IRRF estabelecimento HUN portador 3410 @
Se (((vCodCif = 5) ou (vCodCif = 23) ou (vCodCif = 15) ou (vCodCif = 13) ou (vCodCif = 19)) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIFs para PIS estabelecimento ADM portador 3415 @
Se (((vCodCif = 2) ou (vCodCif = 3)) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIFs para PIS estabelecimento HUN portador 3410 @
Se (((vCodCif = 2) ou (vCodCif = 3)) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIFs para os Sindicatos estabelecimento ADM portador 3415 @
Se (((vCodCif = 40) ou (vCodCif = 43) ou (vCodCif = 41) ou (vCodCif = 42) ou (vCodCif = 44)) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIFs para os Sindicatos estabelecimento HUN portador 3410 @
Se (((vCodCif = 40) ou (vCodCif = 43) ou (vCodCif = 41) ou (vCodCif = 42) ou (vCodCif = 44)) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIF Emp. Santander estabelecimento ADM portador 335 @
Se ((vCodCif = 95) e (vCodFil <> 6)) {
xPortador = "0335"; }

@ CIF Emp. Santander estabelecimento HUN portador 330 @
Se ((vCodCif = 95) e (vCodFil = 6)) {
xPortador = "0330"; }

@ CIF Emp. BB estabelecimento ADM portador 1003 @
Se ((vCodCif = 97) e (vCodFil <> 6)) {
xPortador = "1003"; }

@ CIF Emp. BB estabelecimento HUN portador 1005 @
Se ((vCodCif = 97) e (vCodFil = 6)) {
xPortador = "1005"; }

@ CIF Associação Médica estabelecimento ADM portador 3415 @
Se ((vCodCif = 99) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIF Associação Médica estabelecimento HUN portador 3410 @
Se ((vCodCif = 99) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIF Unimed Odonto estabelecimento ADM @
Se ((vCodCif = 94) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIF Unimed Odonto estabelecimento HUN @
Se ((vCodCif = 94) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIF ASFUNC estabelecimento ADM @
Se ((vCodCif = 58) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIF ASFUNC estabelecimento HUN @
Se ((vCodCif = 58) e (vCodFil = 6)) {
xPortador = "3410"; }

@ CIF IRRF Adiantamento Salarial estabelecimento ADM @
Se ((vCodCif = 17) e (vCodFil <> 6)) {
xPortador = "3415"; }

@ CIF IRRF Adiantamento Salarial estabelecimento HUN @
Se ((vCodCif = 17) e (vCodFil = 6)) {
xPortador = "3410"; }


@ Se o código do dependente for menor que 1, aplica zero @
Se (R047PEN.CodDep < 1) {
vCodDep = 0; }
Senao {
vCodDep = R047PEN.CodDep; }

@ Variáveis Alfanuméricas @                        
xTipTis = R047PEN.TipTis;
xCodTrs = R047PEN.CodTrs;
xSerNfi = R047PEN.SerNfi;
xObsTit = R047PEN.ObsTit;
xTipAgr = R047PEN.TipAgr;
xCodCcu = R047PEN.CodCcu;
xModPag = R047PEN.ModPag;
xTipTit = R047PEN.TipTit;
xGruCon = R047PEN.GruCon;

@ Variáveis Datas @
vVncTit = R047PEN.VncTit;
vIniPer = R047PEN.IniPer;
vIniFer = R047PEN.IniFer;
vDatDem = R047PEN.DatDem;
vDatEnt = R047PEN.DatEnt;
vDatEmi = R047PEN.DatEmi;
vDatAux = R047PEN.DatEnt;
vDatEnt = R047PEN.DatEnt;
vVncTit = R047PEN.VncTit;

@ Cursor para buscar Fluxo e Conta do TOTVS @
SQL_Criar(xCursorFluxo);
SQL_DefinirComando(xCursorFluxo, " SELECT * FROM R047EFI      \
                                WHERE CODCIF = :VCODCIF       \
                                AND NUMEMP = :VNUMEMP         \
                                AND CODFIL = :VCODFIL         \               
                                AND CODFOR = :VCODFOR");
SQL_DefinirInteiro(xCursorFluxo, "VCODCIF", VCODCIF);
SQL_DefinirInteiro(xCursorFluxo, "VNUMEMP", VNUMEMP);
SQL_DefinirInteiro(xCursorFluxo, "VCODFIL", VCODFIL);
SQL_DefinirInteiro(xCursorFluxo, "VCODFOR", VCODFOR);
SQL_AbrirCursor(xCursorFluxo);
SQL_RetornarAlfa(xCursorFluxo, "USU_ContaTotvs",xConta); 
SQL_RetornarAlfa(xCursorFluxo, "USU_FluxoTotvs",xFluxo);
SQL_FecharCursor(xCursorFluxo);
SQL_Destruir(xCursorFluxo);

@ Gerando o número do título @
DesmontaData(vVncTit,vDia,vMes,vAno);
IntParaAlfa(vDia,xDia);
Se (vDia < 10) {
xDia = "0"+xDia; }
IntParaAlfa(vMes,xMes);
Se (vMes < 10) {
xMes = "0"+xMes; }
IntParaAlfa(vAno,xAno);
IntParaAlfa(vNumCad,xNumCad);
IntParaAlfa(vValTit,xValTit);
IntParaAlfa (vCodCif,aCodCif);

@ Enfim gera o número do título com a composição CIF + Ano + Mes + Dia + Matrícula + Valor do Título @
xNumTit = aCodCif + xAno + xMes + xDia + xNumCad;


/* Modificado em 04/12 para aplicar o número do título com padronização do layout final @
@ Cursor para buscar o código do último título integrado @
SQL_Criar(xCursorNumTit);
SQL_DefinirComando(xCursorNumTit, " SELECT * FROM R047NUM    \
                                    WHERE NUMEMP = :VNUMEMP  \
                                    AND ULTNUM IN (SELECT MAX(ULTNUM) FROM R047NUM)");
SQL_DefinirInteiro(xCursorNumTit, "VNUMEMP", VNUMEMP);
SQL_AbrirCursor(xCursorNumTit);
SQL_RetornarAlfa(xCursorNumTit, "ULTNUM",xUltNum); 
SQL_RetornarAlfa(xCursorNumTit, "ULTSTR",xUltStr);
SQL_FecharCursor(xCursorNumTit);
SQL_Destruir(xCursorNumTit);

@ Cria o próximo número de título a ser usado na integração @
AlfaParaInt(xUltNum,vUltNum);
vProxNum = vUltNum + 1;
IntParaAlfa(vProxNum,xProxNum);
 
@ Verifica os dígitos de acordo com valor da coluna para aplicação dos zeros à esquerda no alfa @
Se ((vProxNum >= 1) e (vProxNum <= 9)) {
xNumTit = xUltStr + "0000000000000" + xProxNum; }
Senao {
Se ((vProxNum >= 10) e (vProxNum <= 99)) {
xNumTit = xUltStr + "000000000000" + xProxNum; }
Senao {
Se ((vProxNum >= 100) e (vProxNum <= 999)) {
xNumTit = xUltStr + "00000000000" + xProxNum; }
Senao {
Se ((vProxNum >= 1000) e (vProxNum <= 9999)) {
xNumTit = xUltStr + "0000000000" + xProxNum; }
Senao {
Se ((vProxNum >= 10000) e (vProxNum <= 99999)) {
xNumTit = xUltStr + "000000000" + xProxNum; }
Senao {
Se ((vProxNum >= 100000) e (vProxNum <= 999999)) {
xNumTit = xUltStr + "00000000" + xProxNum; }
Senao {
Se ((vProxNum >= 1000000) e (vProxNum <= 9999999)) {
xNumTit = xUltStr + "0000000" + xProxNum; }
Senao {
Se ((vProxNum >= 10000000) e (vProxNum <= 99999999)) {
xNumTit = xUltStr + "000000" + xProxNum; }
Senao {
Se ((vProxNum >= 100000000) e (vProxNum <= 999999999)) {
xNumTit = xUltStr + "00000" + xProxNum; }
Senao {
Se ((vProxNum >= 1000000000) e (vProxNum <= 9999999999)) {
xNumTit = xUltStr + "0000" + xProxNum; }
Senao {
Se ((vProxNum >= 10000000000) e (vProxNum <= 99999999999)) {
xNumTit = xUltStr + "000" + xProxNum; }
Senao {
Se ((vProxNum >= 100000000000) e (vProxNum <= 999999999999)) {
xNumTit = xUltStr + "00" + xProxNum; }
Senao {
Se ((vProxNum >= 1000000000000) e (vProxNum <= 9999999999999)) {
xNumTit = xUltStr + "0" + xProxNum; }
Senao {
Se ((vProxNum >= 10000000000000) e (vProxNum <= 99999999999999)) {
xNumTit = xUltStr + xProxNum; }
}}}}}}}}}}}}}    

@ Inserindo último título na tabela R047NUM para controla na próxima execução @
ExecSql "INSERT INTO R047NUM (NUMEMP,ULTNUM,ULTSTR) \
         VALUES (:vNUMEMP,:vPROXNUM,:xULTSTR)"; 
         
          */

@ Inserindo registro na tabela R047HIS que são armazenados títulos integrados @
ExecSql "INSERT INTO R047HIS (NUMEMP,CODFIL,TIPTIT,CODFOR,TIPCOL,NUMCAD,CODCAL,            \
         NUMTIT,CODDEP,TIPCIF,DATAUX,TIPTIS,CODCIF,CODTRS,SERNFI,VNCTIT,VALTIT,            \
         INIPER,INIFER,DATDEM,OBSTIT,CODOEM,ORIGPS,CTAFIN,TIPAGR,CODRED,CODNTG,            \
         CODCCU,DATENT,DATEMI,MODPAG,FILSAP,GRUCON,CODUSU,USU_CONTATOTVS,USU_FLUXOTOTVS,   \
         USU_CODBAN,USU_CODAGE,USU_PORTADOR)                                               \
                                                                                           \
         VALUES                                                                            \
                                                                                           \
         (:vNUMEMP,:vCODFIL,:XTIPTIT,:vCODFOR,:vTIPCOL,:vNUMCAD,:vCODCAL,:xNUMTIT,         \
         :vCODDEP,:vTIPCIF,:vDATAUX,:xTIPTIS,:vCODCIF,:xCODTRS,:xSERNFI,:vVNCTIT,          \
         :vVALTIT,:vINIPER,:vINIFER,:vDATDEM,:xOBSTIT,:vCODOEM,:vORIGPS,:vCTAFIN,          \
         :xTIPAGR,:vCODRED,:vCODNTG,:xCODCCU,:vDATENT,:vDATEMI,:xMODPAG,:vFILSAP,          \
         :xGRUCON,:vCODUSU,:xCONTA,:xFLUXO,:vCODBAN,:vCODAGE,:xPORTADOR)";

@ Deletando o registro da pendência na R047PEN que foi integrada @
ExecSql "DELETE FROM R047PEN     \
         WHERE NUMEMP = :vNUMEMP \
         AND CODFIL = :vCODFIL   \
         AND TIPTIT = :XTIPTIT   \
         AND CODFOR = :vCODFOR   \
         AND TIPCOL = :vTIPCOL   \
         AND NUMCAD = :vNUMCAD   \
         AND CODCAL = :vCODCAL   \
         AND CODDEP = :vCODDEP   \
         AND TIPTIS = :xTIPTIS   \
         AND CODCIF = :vCODCIF   \
         AND CODTRS = :xCODTRS   \
         AND SERNFI = :xSERNFI   \
         AND VNCTIT = :vVNCTIT   \
         AND VALTIT = :vVALTIT   \
         AND INIPER = :vINIPER   \
         AND INIFER = :vINIFER   \
         AND DATDEM = :vDATDEM   \
         AND OBSTIT = :xOBSTIT   \
         AND CODOEM = :vCODOEM   \
         AND ORIGPS = :vORIGPS   \
         AND CTAFIN = :vCTAFIN   \
         AND TIPAGR = :xTIPAGR   \
         AND CODRED = :vCODRED   \
         AND CODNTG = :vCODNTG   \
         AND CODCCU = :xCODCCU   \
         AND DATENT = :vDATENT   \
         AND DATEMI = :vDATEMI   \
         AND MODPAG = :xMODPAG   \
         AND FILSAP = :vFILSAP   \
         AND GRUCON = :xGRUCON   \
         AND CODUSU = :vCODUSU ";   

@ Validação Final @ 
vSeDeuCerto = 1;
                           